{"version":3,"sources":["time.ts","hooks.ts","components/TimeBar.tsx","components/Default.tsx","components/Setting.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TimeType","currentYear","Date","getFullYear","currentMonth","getMonth","getCurrentSeconds","time","minute","getSeconds","hour","getMinutes","day","MINUTE","getHours","month","HOUR","getDate","lastMonth","firstMonth","year","valueOf","getRate","seconds","total","cm","nm","cy","ny","current","rate","key","value","toFixed","useInterval","callback","delay","savedCallback","useRef","useEffect","id","setInterval","clearInterval","TimeBar","type","detail","one","useState","width","setWidth","getWidth","currentClassName","className","style","Default","SideBar","desc","action","tab","onClick","fontSize","fontWeight","Setting","currentTab","show","setShow","fold","right","bottom","Year","Month","Day","Hour","Minute","Tab","App","setRate","setTab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d16d856c.chunk.js","sourcesContent":["export enum TimeType {\n  Default = \"DEFAULT\",\n  Year = \"YEAR\",\n  Month = \"MONTH\",\n  Day = \"DAY\",\n  Hour = \"HOUR\",\n  Minute = \"MINUTE\"\n}\n\nexport interface Seconds {\n  year: number,\n  month: number,\n  day: number,\n  hour: number,\n  minute: number\n}\n\n\nfunction currentYear(): number {\n  return new Date().getFullYear();\n}\n\nfunction currentMonth(): number {\n  return new Date().getMonth();\n}\n\nfunction currentDate(): number {\n  return new Date().getDate();\n}\n\nfunction currentHour():number {\n  return new Date().getHours();\n}\n\nfunction currentMinute(): number {\n  return new Date().getMinutes();\n}\n\nfunction currentSecond(): number {\n  return new Date().getSeconds()\n}\n\nconst MINUTE: number = 60;\nconst HOUR: number = MINUTE * 60;\nconst DAY: number = HOUR * 24;\n\n\nfunction getSeconds(time: Seconds): Seconds{\n  time.minute = MINUTE;\n  time.hour = HOUR;\n  time.day = DAY;\n\n  const cm: Date = new Date(currentYear(), currentMonth());\n  const nm: Date = new Date(currentYear(), currentMonth() + 1);\n  time.month = (nm.valueOf() - cm.valueOf()) / 1000;\n  const cy: Date = new Date(currentYear(), 0, 0);\n  const ny: Date = new Date(currentYear() + 1, 0, 0);\n  time.year = (ny.valueOf() - cy.valueOf()) / 1000;\n\n  return time;\n\n}\n\n\nfunction getCurrentSeconds(time: Seconds): Seconds {\n  time.minute = currentSecond();\n  time.hour = currentMinute() * MINUTE + time.minute;\n  time.day = currentHour() * HOUR + time.hour;\n  time.month = (currentDate() - 1) * DAY + time.day;\n  const lastMonth = new Date(currentYear(), currentMonth());\n  const firstMonth = new Date(currentYear(), 0);\n  time.year = time.month + (lastMonth.valueOf() - firstMonth.valueOf()) / 1000;\n  return time\n}\n\nfunction getRate(): Seconds {\n  let seconds = {\n    year: 0,\n    month: 0,\n    day: 0,\n    hour: 0,\n    minute: 0\n  }\n\n  let total = getSeconds({...seconds});\n  let current = getCurrentSeconds({...seconds});\n\n  let rate: Seconds = {...seconds};\n\n\n  for (let key in rate) {\n    let value = (current[key] / total[key]) * 100;\n    rate[key] =  +value.toFixed(4);\n  }\n  return rate;\n}\n\nexport default getRate;\n","import {useEffect, useRef} from 'react';\n\n\ninterface RefObject {\n  current: Callback\n}\n\ninterface Callback {\n  (): void\n}\n\nfunction useInterval(callback: Callback, delay: number) {\n  const savedCallback  = useRef<Callback>();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (typeof savedCallback.current === 'function'){\n        savedCallback.current();  \n      }\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","import React, {useState} from 'react';\nimport useInterval from '../hooks';\n\ninterface BarWidth {\n  width: string;\n}\n\ninterface Props {\n  rate: number,\n  detail: string,\n  type?: string,\n  one?: boolean\n}\n\nfunction TimeBar({rate, type, detail, one}: Props) {\n  const [width, setWidth] = useState<BarWidth>({width: \"0vw\"});\n  useInterval(\n    () => {\n      setWidth(getWidth());\n    },\n    10\n  )\n  const getWidth = () => {\n    return {\n      \"width\": (rate * 80)/100  + \"vw\"\n    }\n  }\n  const currentClassName = (type ? type : \"\") + (one ? \" One\" : \"\");\n  return (\n      <>\n        <div className={currentClassName}>\n          <div className=\"Progress\">\n            {detail}的時間進度條: {rate}%\n          </div>\n          <div className=\"Graph\" >\n            <div className=\"TimeBar\" style={width}/>\n          </div>\n        </div>\n      </>\n  );\n}\n\nexport default TimeBar;","import React from 'react';\nimport TimeBar from './TimeBar';\n\nfunction Default({year, month, day, hour, minute}) {\n  return (\n      <>\n        <div className=\"Title\">\n          Enjoy {new Date().getFullYear()}\n        </div>\n        <TimeBar rate={year} detail=\"今年\" type=\"Year\" />\n        <TimeBar rate={month} detail=\"本月\" type=\"Month\" />\n        <TimeBar rate={day} detail=\"本天\" type=\"Day\" />\n        <TimeBar rate={hour} detail=\"本小時\" type=\"Hour\" />\n        <TimeBar rate={minute} detail=\"本分鐘\" type=\"Minute\"/>\n      </>\n  );\n}\n\nexport default Default;","import React, {useState} from 'react';\nimport { TimeType } from '../time';\n\ninterface SettingProps {\n  action: Callback,\n  currentTab: TimeType\n}\n\ninterface Callback {\n  (TimeType): void\n}\n\nfunction Setting({action, currentTab}: SettingProps) {\n  const [show, setShow] = useState<boolean>(true);\n\n  interface SideBarStyle {\n    right: string,\n    bottom: string\n  }\n\n  function getSideBarStyle(): SideBarStyle{\n    if (show){\n      return {\n        right: '120vh',\n        bottom: '-100vh'\n      }\n    } else {\n      return {\n        right: 'calc(100vw - 20vh)',\n        bottom: '-42vh'\n      }\n    } \n  }\n\n  const fold = () => {\n      setShow(!show)\n    }\n\n  return (\n      <>\n        <div className=\"SideBar\" onClick={fold} style={getSideBarStyle()}>\n          <SideBar type={TimeType.Default} desc=\"全\" action={action} tab={currentTab}/>\n          <SideBar type={TimeType.Year} desc=\"年\" action={action} tab={currentTab}/>\n          <SideBar type={TimeType.Month} desc=\"月\" action={action} tab={currentTab}/>\n          <SideBar type={TimeType.Day} desc=\"日\" action={action} tab={currentTab}/>\n          <SideBar type={TimeType.Hour} desc=\"时\" action={action} tab={currentTab}/>\n          <SideBar type={TimeType.Minute} desc=\"分\" action={action} tab={currentTab}/>\n        </div>\n        { show &&\n          <div className=\"Settings\" onClick={fold}>\n          ⏱\n          </div> \n        }\n      </>\n  );\n}\n\n\ninterface SideBarProps {\n  type: string,\n  desc: string,\n  action: Callback,\n  tab: TimeType\n}\n\n\nfunction SideBar({type, desc, action, tab}: SideBarProps) {\n\n  function getStyle() {\n    if (type === tab){\n      return {\n        fontSize: \"1.70vh\",\n        fontWeight: 600\n      }\n    } else {\n      return {}\n    }\n  }\n\n  \n  function setTab() {\n    action(type);\n  }\n  return (\n    <>\n      <div onClick={setTab} className={type} style={getStyle()}>\n        {desc}\n      </div>\n    </>\n  )\n}\n\nexport default Setting;\n\n","import React, {useState} from 'react';\nimport getRate, {Seconds, TimeType} from './time';\nimport useInterval from './hooks'\nimport Default from './components/Default';\nimport TimeBar from './components/TimeBar';\nimport Setting from './components/Setting';\n\ninterface TabProps {\n  type: TimeType,\n  rate: Seconds\n}\n\nfunction Tab({type, rate}: TabProps) {\n  if (type === TimeType.Year) {\n    return <TimeBar rate={rate.year} detail=\"今年\" one={true} />\n\n  } \n  else if (type === TimeType.Month) {\n    return <TimeBar rate={rate.month} detail=\"本月\" one={true} />\n  }\n  else if (type === TimeType.Day) {\n    return <TimeBar rate={rate.day} detail=\"本天\" one={true} />\n\n  } \n  else if (type === TimeType.Hour) {\n    return <TimeBar rate={rate.hour} detail=\"本小时\" one={true} />\n  } \n  else if (type === TimeType.Minute) {\n    return <TimeBar rate={rate.minute} detail=\"本分钟\" one={true} />\n  } \n  else {\n    return <Default {...rate} />\n  }\n\n}\n\n\nfunction App() {\n  const [rate, setRate] = useState<Seconds>(getRate());\n  const [tab, setTab] = useState<TimeType>(TimeType.Default);\n\n  useInterval(\n    () => {\n      setRate(getRate());\n    },\n    10\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"Time\">\n        <div className=\"Bar\">\n          <Tab type={tab} rate={rate} />          \n        </div>\n      </div>\n      <Setting action={setTab} currentTab={tab} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}